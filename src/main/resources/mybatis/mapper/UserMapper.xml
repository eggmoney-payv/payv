<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.eggmoney.payv.infrastructure.mybatis.mapper.UserMapper">

    <!-- ResultMap 정의 -->
    <resultMap id="userResultMap" type="com.eggmoney.payv.infrastructure.mybatis.record.UserRecord">
        <id property="userId" column="user_id" />
        <result property="email" column="email" />
        <result property="name" column="name" />
        <result property="password" column="password" />
        <result property="role" column="role" />
        <result property="createdAt" column="created_at" javaType="java.time.LocalDateTime" />
    </resultMap>

    <!-- Create -->
    <insert id="insertUser" parameterType="com.eggmoney.payv.infrastructure.mybatis.record.UserRecord">
        INSERT INTO users (
            user_id, email, name, password, role, created_at
        ) VALUES (
            #{userId},
            #{email},
            #{name},
            #{password},
            #{role},
            #{createdAt}
        )
    </insert>

    <!-- Read -->
    <select id="selectUserById" parameterType="string" resultMap="userResultMap">
        SELECT user_id, email, name, password, role, created_at
        FROM users
        WHERE user_id = #{userId}
    </select>

    <select id="selectUserByEmail" parameterType="string" resultMap="userResultMap">
        SELECT user_id, email, name, password, role, created_at
        FROM users
        WHERE email = #{email}
    </select>

    <select id="selectUserList" resultMap="userResultMap">
        SELECT user_id, email, name, password, role, created_at
        FROM users
        ORDER BY created_at DESC
    </select>

    <select id="selectUserListByRole" resultMap="userResultMap">
        SELECT user_id, email, name, password, role, created_at
        FROM users
        WHERE role = #{role}
        ORDER BY created_at DESC
    </select>

    <!-- Update -->
    <update id="updateUser" parameterType="com.eggmoney.payv.infrastructure.mybatis.record.UserRecord">
        UPDATE users SET
            email = #{email},
            name = #{name},
            password = #{password},
            role = #{role}
        WHERE user_id = #{userId}
    </update>

    <update id="updateUserEmail">
        UPDATE users SET email = #{email}
        WHERE user_id = #{userId}
    </update>

    <update id="updateUserPassword">
        UPDATE users SET password = #{password}
        WHERE user_id = #{userId}
    </update>

    <update id="updateUserName">
        UPDATE users SET name = #{name}
        WHERE user_id = #{userId}
    </update>

    <update id="updateUserRole">
        UPDATE users SET role = #{role}
        WHERE user_id = #{userId}
    </update>

    <!-- Delete -->
    <delete id="deleteUserById">
        DELETE FROM users WHERE user_id = #{userId}
    </delete>

    <!-- 비즈니스 쿼리 -->
    <select id="existsByEmail" resultType="int">
        SELECT COUNT(*)
        FROM users
        WHERE email = #{email}
    </select>

    <select id="existsByEmailAndUserIdNot" resultType="int">
        SELECT COUNT(*)
        FROM users
        WHERE email = #{email}
        AND user_id != #{excludeUserId}
    </select>

    <!-- 페이징 및 검색 (Oracle 11g 방식) -->
    <select id="selectUserListByNameContaining" resultMap="userResultMap">
        <![CDATA[
        SELECT * FROM (
            SELECT ROWNUM rn, a.*
            FROM (
                SELECT user_id, email, name, password, role, created_at
                FROM users
                WHERE name LIKE '%' || #{name} || '%'
                ORDER BY created_at DESC
            ) a
            WHERE ROWNUM <= #{offset} + #{limit}
        )
        WHERE rn > #{offset}
        ]]>
    </select>

    <select id="countUsersByRole" resultType="long">
        SELECT COUNT(*)
        FROM users
        WHERE role = #{role}
    </select>

</mapper>