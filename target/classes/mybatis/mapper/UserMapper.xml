<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper
	namespace="com.eggmoney.payv.infrastructure.mybatis.mapper.UserMapper">

	<!-- 기존 MyBatisUserRepository와 호환되는 메서드들 -->

	<!-- 사용자 ID로 조회 -->
	<select id="selectUserById" parameterType="string"
		resultType="com.eggmoney.payv.infrastructure.mybatis.record.UserRecord">
		SELECT
		USER_ID as userId,
		EMAIL as email,
		NAME as name,
		PASSWORD as password,
		CREATE_AT as createAt
		FROM USERS
		WHERE USER_ID =
		#{userId}
	</select>

	<!-- 이메일로 사용자 조회 -->
	<select id="selectUserByEmail" parameterType="string"
		resultType="com.eggmoney.payv.infrastructure.mybatis.record.UserRecord">
		SELECT
		USER_ID as userId,
		EMAIL as email,
		NAME as name,
		PASSWORD as password,
		CREATE_AT as createAt
		FROM USERS
		WHERE EMAIL =
		#{email}
	</select>

	<!-- 전체 사용자 목록 조회 -->
	<select id="selectUserList"
		resultType="com.eggmoney.payv.infrastructure.mybatis.record.UserRecord">
		SELECT
		USER_ID as userId,
		EMAIL as email,
		NAME as name,
		PASSWORD as password,
		CREATE_AT as createAt
		FROM USERS
		ORDER BY CREATE_AT
		DESC
	</select>

	<!-- 사용자 저장 -->
	<insert id="insertUser"
		parameterType="com.eggmoney.payv.infrastructure.mybatis.record.UserRecord">
		INSERT INTO USERS (
		USER_ID,
		EMAIL,
		NAME,
		PASSWORD,
		CREATE_AT
		) VALUES (
		#{userId},
		#{email},
		#{name},
		#{password},
		#{createAt}
		)
	</insert>

	<!-- 사용자 업데이트 -->
	<update id="updateUser"
		parameterType="com.eggmoney.payv.infrastructure.mybatis.record.UserRecord">
		UPDATE USERS SET
		EMAIL = #{email},
		NAME = #{name},
		PASSWORD = #{password}
		WHERE USER_ID = #{userId}
	</update>

	<!-- 이메일 업데이트 -->
	<update id="updateUserEmail">
		UPDATE USERS SET
		EMAIL = #{email}
		WHERE USER_ID =
		#{userId}
	</update>

	<!-- 비밀번호 업데이트 -->
	<update id="updateUserPassword">
		UPDATE USERS SET
		PASSWORD = #{password}
		WHERE USER_ID =
		#{userId}
	</update>

	<!-- 이름 업데이트 -->
	<update id="updateUserName">
		UPDATE USERS SET
		NAME = #{name}
		WHERE USER_ID =
		#{userId}
	</update>

	<!-- 사용자 삭제 -->
	<delete id="deleteUserById" parameterType="string">
		DELETE FROM USERS
		WHERE USER_ID = #{userId}
	</delete>

	<!-- 이메일 존재 여부 확인 -->
	<select id="existsByEmail" parameterType="string"
		resultType="int">
		SELECT COUNT(*)
		FROM USERS
		WHERE EMAIL = #{email}
	</select>

	<!-- 이메일 중복 확인 (특정 ID 제외) - 파라미터 이름 수정 -->
	<select id="existsByEmailAndUserIdNot" resultType="int">
		SELECT
		COUNT(*)
		FROM USERS
		WHERE EMAIL = #{email}
		AND USER_ID !=
		#{excludeUserId}
	</select>

	<!-- 이름으로 검색 (페이징) -->
	<select id="selectUserListByNameContaining"
		resultType="com.eggmoney.payv.infrastructure.mybatis.record.UserRecord">
		SELECT * FROM (
		SELECT ROWNUM rn, u.* FROM (
		SELECT
		USER_ID as
		userId,
		EMAIL as email,
		NAME as name,
		PASSWORD as password,
		CREATE_AT as
		createAt
		FROM USERS
		WHERE NAME LIKE '%' || #{name} || '%'
		ORDER BY
		CREATE_AT DESC
		) u WHERE ROWNUM &lt;= #{limit} + #{offset}
		) WHERE rn >
		#{offset}
	</select>

</mapper>